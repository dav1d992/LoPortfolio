<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[dav1d992's blog]]></title>
        <description><![CDATA[dav1d992's blog]]></description>
        <link>https://dav1d992.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Wed, 25 May 2022 20:30:41 GMT</lastBuildDate>
        <atom:link href="https://dav1d992.com/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[How to Secure Your Firebase Project]]></title>
            <link>https://dav1d992.com/blog/how-to-secure-firebase-project</link>
            <guid isPermaLink="false">https://dav1d992.com/blog/how-to-secure-firebase-project</guid>
            <dc:creator><![CDATA[dav1d992]]></dc:creator>
            <pubDate>Thu, 13 May 2021 00:00:00 GMT</pubDate>
            <content:encoded>&lt;blockquote&gt;
&lt;p&gt;disclaimer: This is not by any means to be the best practice guide of using firebase in every project. Every project has its own needs and specifications. This guide may not be suitable with your needs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do you develop apps using Firebase? If so, we should know that our firebase configs will be exposed to the client (especially for web clients). Then what&apos;s the deal? Many possibilities can be happened and prevented. So many articles already covers on how to secure our firebase project by using security rules, authentication check, etc. I usually define my security rules using a package named &lt;a href=&quot;https://www.npmjs.com/package/@jahed/firebase-rules&quot;&gt;&lt;code&gt;@jahed/firebase-rules&lt;/code&gt;&lt;/a&gt;. But how about preventing someone from making their own client and use our exposed firebase configs to do some shady stuffs towards our realtime database?&lt;/p&gt;
&lt;h2&gt;Apply Restrictions to the API Key&lt;/h2&gt;
&lt;p&gt;Every firebase project is a GCP (Google Cloud Platform) project, so we can go to Google Cloud console to configure further our firebase project. We can restrict the API key even though it is exposed. Just follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&quot;https://console.cloud.google.com/apis&quot;&gt;https://console.cloud.google.com/apis&lt;/a&gt;,
&lt;img src=&quot;https://dav1d992.com/images/2021-05-13-how-to-secure-firebase-project/GCP-01.png&quot; alt=&quot;Credentials Tab&quot;&gt;&lt;/li&gt;
&lt;li&gt;Select the desired firebase project,&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Credentials&lt;/code&gt; menu,&lt;/li&gt;
&lt;li&gt;Look for &lt;code&gt;API Keys&lt;/code&gt; section, select the API key which has &lt;code&gt;...(auto created by Firebase)&lt;/code&gt;,
&lt;img src=&quot;https://dav1d992.com/images/2021-05-13-how-to-secure-firebase-project/GCP-02.png&quot; alt=&quot;API Key Restrictions Tab&quot;&gt;&lt;/li&gt;
&lt;li&gt;You will be directed to a page called &lt;code&gt;Restrict and rename API key&lt;/code&gt;, go to &lt;code&gt;Application restrictions&lt;/code&gt; section, select &lt;code&gt;HTTP referrers (web sites)&lt;/code&gt;, add your production web client domain in &lt;code&gt;Website restrictions&lt;/code&gt; section. Don&apos;t add &lt;code&gt;localhost&lt;/code&gt; if you intend to use the firebase project for production.&lt;/li&gt;
&lt;li&gt;Hit the &lt;code&gt;save&lt;/code&gt; button to apply changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Voila! Your API key already restricted!&lt;/p&gt;
&lt;h2&gt;Use Different Firebase Project for Local Development&lt;/h2&gt;
&lt;p&gt;Now that we already apply restrictions to our API key, how about our local development (&lt;code&gt;localhost&lt;/code&gt;)? Well, we can just create a new firebase project which will be used for our local development.&lt;/p&gt;
&lt;h3&gt;Special Case: Develop Hybrid Mobile App Using Ionic&lt;/h3&gt;
&lt;p&gt;When developing hybrid app using ionic, chances are we gonna use the same firebase configs for Web and Android / iOS build (firebase web configs). Even though we made several firebase web configs, the API key will remain the same. If we apply restrictions to the API key to be only accessible for certain domain, then the API key won&apos;t be usable for the mobile build. Fortunately, there is a workaround for this. We can just create a new API key which don&apos;t have any domain restrictions just for our mobile build (the API key can&apos;t be easily accessed by the user anyway for Android / iOS build). So, we can use the same firebase configs for our web and mobile builds, but having different API key. Just go to https://console.cloud.google.com/apis/credentials (make sure you already select the corresponding project first), then just create a new API key which will be used for your mobile apps.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Defining Firebase security rules
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@jahed/firebase-rules&quot;&gt;https://www.npmjs.com/package/@jahed/firebase-rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Restrict API key
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@devesu/how-to-secure-your-firebase-project-even-when-your-api-key-is-publicly-available-a462a2a58843&quot;&gt;https://medium.com/@devesu/how-to-secure-your-firebase-project-even-when-your-api-key-is-publicly-available-a462a2a58843&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Monitor and Measure Site Performance from Time to Time and Automatically using Speedlify]]></title>
            <link>https://dav1d992.com/blog/monitor-and-measure-site-performance-with-speedlify</link>
            <guid isPermaLink="false">https://dav1d992.com/blog/monitor-and-measure-site-performance-with-speedlify</guid>
            <dc:creator><![CDATA[dav1d992]]></dc:creator>
            <pubDate>Sat, 07 Nov 2020 00:00:00 GMT</pubDate>
            <content:encoded>&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Want to measure and monitor your site performance from time to time and automatically? Deploy &lt;a href=&quot;https://speedlify.dev&quot;&gt;Speedlify&lt;/a&gt; through &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; and use &lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt; (cron schedule) or Zapier to automatically trigger build every desired time.&lt;/p&gt;
&lt;p&gt;You can directly visit &lt;a href=&quot;https://github.com/zachleat/speedlify/#deploy-to-netlify&quot;&gt;this page&lt;/a&gt; if you know what to do next. But if you need some guidance, this article will help you step by step.&lt;/p&gt;
&lt;h3&gt;What will be covered in this article?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How to configure Speedlify&lt;/li&gt;
&lt;li&gt;How to deploy Speedlify&lt;/li&gt;
&lt;li&gt;Using Netlify build hooks and Github Actions to automatically trigger build Speedlify page every desired time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;This article won&apos;t cover...&lt;/h3&gt;
&lt;p&gt;SEO or visitor related metrics like Google Analytics. The site performance mentioned in this article is &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse&quot;&gt;Lighthouse&lt;/a&gt; based performance measurement.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Measuring Site Performance&lt;/h2&gt;
&lt;p&gt;Nowadays there are so many ways to measure site performance beside running lighthouse in your local machine (Chrome Dev Tools). Even recently &lt;a href=&quot;https://vercel.com&quot;&gt;Vercel&lt;/a&gt;, PaaS for frontend deployment released a feature called &lt;a href=&quot;https://vercel.com/docs/analytics/overview.amp&quot;&gt;Analytics&lt;/a&gt;. This feature can show your &lt;a href=&quot;https://nextjs.org/analytics&quot;&gt;Next.js&lt;/a&gt; or &lt;a href=&quot;https://vercel.com/blog/gatsby-analytics&quot;&gt;Gatsby&lt;/a&gt; site performance automatically from time-to-time without having to configure anything (&lt;em&gt;almost zero-config&lt;/em&gt;). But this feature is limited to be applicable for one project if your vercel account is a free version.&lt;/p&gt;
&lt;p&gt;What if we have more than one project / site to be measured from time-to-time without spending extra cost? Well, this is where &lt;a href=&quot;https://speedlify.dev&quot;&gt;Speedlify&lt;/a&gt; comes in, a template for site performance monitor created by &lt;a href=&quot;https://github.com/zachleat&quot;&gt;Zach Leatherman&lt;/a&gt;. Speedlify built using a static site generator framework called &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;11ty(eleventy)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&apos;ve tried to deploy my own speedlify &lt;a href=&quot;https://audit.dav1d992.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;fun fact: I found Speedlify when I was just randomly exploring 11ty docs page (not really important, just intermezzo ðŸ˜„)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, let&apos;s get our hands dirty!&lt;/p&gt;
&lt;h2&gt;How?&lt;/h2&gt;
&lt;h3&gt;What is needed?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a Github account&lt;/li&gt;
&lt;li&gt;a Netlify account&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;This Guide was Written with Assumtions that You:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;know how to use basic Git commands&lt;/li&gt;
&lt;li&gt;familiar with Netlify&lt;/li&gt;
&lt;li&gt;familiar with Node.js environment (installed node and npm)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I suggest you to visit &lt;a href=&quot;https://speedlify.dev&quot;&gt;Speedlify&lt;/a&gt; to get some glimpse on what we will be using. There&apos;s a link to the source code repository on that page which shows you how to deploy your own Speedlify page. However, if you are having some difficulties, you can folow these steps:&lt;/p&gt;
&lt;h3&gt;#1: Clone Speedlify Repo&lt;/h3&gt;
&lt;p&gt;Import speedlify repository to your github account (&lt;a href=&quot;https://github.com/new/import&quot;&gt;https://github.com/new/import&lt;/a&gt;),
input this URL: &lt;code&gt;https://github.com/zachleat/speedlify/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After the import process is done, clone your speedlify repo into your local machine or just run these command below in your local folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/[YOUR_GITHUB_USERNAME]/speedlify/
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cd speedlify
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, run &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;npm i&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;#2: Configure URLs&lt;/h3&gt;
&lt;p&gt;Open &lt;code&gt;_data/sites&lt;/code&gt; folder. Every file you create here will represent a category. You can defined more than one URL for every category.
Just delete all default files in &lt;code&gt;_data/sites&lt;/code&gt;. Create a file &lt;code&gt;[CATEGORY_NAME].js&lt;/code&gt;. (change [CATEGORY_NAME] with your desired category name). You can create more than one category, but you must know some limitations here: &lt;a href=&quot;https://github.com/zachleat/speedlify/#known-limitations&quot;&gt;https://github.com/zachleat/speedlify/#known-limitations&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// _data/sites/[CATEGORY_NAME].js
module.exports = {
	name: &quot;Category Name&quot;, // optional, falls back to object key
	description: &quot;Category Description&quot;,
	options: {
		frequency: 60 * 23, // 23 hours

		// Use &quot;run&quot; if the sites donâ€™t share assets on the same origin
		//           and we can reset chrome with each run instead of
		//           each site in every run (itâ€™s faster)
		// Use &quot;site&quot; if sites are all on the same origin and share assets.
		freshChrome: &quot;run&quot;,
	},
	urls: [
		&quot;https://[YOUR_SITE_URL]/&quot;,
		&quot;https://[YOUR_SITE_URL]/&quot;,
		// etc
	]
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;explanations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;frequency&lt;/code&gt;: to set minimum time needed before next measurement. If we set &lt;code&gt;60*23&lt;/code&gt; (1380 minutes or 23 hours) it means we will be measuring our site performance once every 23 hours. This value will be used to avoid measurement more than once before the minimum time was passed which will affect the build time. If we set the frequency to 23 hours and trigger build every 6 hours, the measurement for this category will be skipped if the last measurement haven&apos;t passed 23 hours.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;#3: Test run in local&lt;/h3&gt;
&lt;p&gt;Run &lt;code&gt;npm run start&lt;/code&gt;. If the categories you input are shown, you can continue to the next step. You won&apos;t see any measurements. Measurements will be done at the build time when we deploy your Speedlify to Netlify.
Commit your changes and run &lt;code&gt;git push&lt;/code&gt; to apply changes to your github repository.&lt;/p&gt;
&lt;h3&gt;#4: Deploy configured Speedlify through Netlify&lt;/h3&gt;
&lt;p&gt;Open your Netlify dashboard (&lt;a href=&quot;https://app.netlify.com/&quot;&gt;https://app.netlify.com/&lt;/a&gt;), click &quot;New site from Git&quot;. Point it to your Speedlify repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dav1d992.com/images/2020-11-07-monitor-and-measure-site-performance-with-speedlify/add-site-netlify.png&quot; alt=&quot;Click New site from Git&quot;&gt;&lt;/p&gt;
&lt;p&gt;Confirm the build configurations until &quot;Deploy Site&quot; button is shown and click that button. Netlify build will do the build and deployment process. If the build and deployment process are successful, you can preview your deployment.&lt;/p&gt;
&lt;p&gt;The measurement page will look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dav1d992.com/images/2020-11-07-monitor-and-measure-site-performance-with-speedlify/preview.png&quot; alt=&quot;Measurement page&quot;&gt;&lt;/p&gt;
&lt;h3&gt;#5: Configure Github Actions to Automatically Trigger Build Every Desired Time&lt;/h3&gt;
&lt;p&gt;To do measurement from time-to-time, we will utilize Netlify build hooks and Github Actions. Why? Because measurement are only done on build time. It will be a hassle to trigger the build process manually. You don&apos;t have to use Github Actions if you prefer to use Zapier or similar services which support cron schedule. The same process can be achieved using Zapier with Schedule by Zapier and Webhooks by Zapier. However for the time being Webhooks by Zapier can only be enabled if you are a Zapier premium user. Therefore, in this guide I will use Github Actions as an alternative which are more friendly to our pocket.&lt;/p&gt;
&lt;p&gt;We will need build hook link (webhooks) to trigger build in Netlify. To get that link, open your speedlify project in your Netlify dashboard, then open &quot;Site settings&quot;. Open &quot;Build &amp;#x26; Deploy&quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dav1d992.com/images/2020-11-07-monitor-and-measure-site-performance-with-speedlify/build-and-deploy-setting.png&quot; alt=&quot;Open Build and Deploy settings&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then point to &quot;Build hooks&quot;, click &quot;Add build hook&quot;.
&lt;img src=&quot;https://dav1d992.com/images/2020-11-07-monitor-and-measure-site-performance-with-speedlify/add-build-hook.png&quot; alt=&quot;Add Build Hook&quot;&gt;&lt;/p&gt;
&lt;p&gt;We will get the build hooks URL, copy that link.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dav1d992.com/images/2020-11-07-monitor-and-measure-site-performance-with-speedlify/build-hook-link.png&quot; alt=&quot;Alt Text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now we can configure Github Actions to automatically trigger build to Netlify. Go back to your speedlify local folder, add a file named &lt;code&gt;.github/workflows/main.yml&lt;/code&gt; and paste the copied build hooks URL into this file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# .github/workflows/main.yml

# edit according to your needs
name: Trigger Netlify Build daily on Weekday
on:
  schedule:
    # if you want to define your own build trigger schedule, just change the cron schedule value below
    # use https://crontab.guru/ if you are having some difficulties on how to define the cron values
    - cron: &apos;0 22 * * MON-FRI&apos;
    # every day on weekdays 22:00.
jobs:
  build:
    name: Netlify build
    runs-on: ubuntu-latest
    steps:
      - name: Curl request
        run: curl -X POST -d {} YOUR_BUILD_HOOK_URL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commit your changes and run &lt;code&gt;git push&lt;/code&gt;. If it&apos;s configured correctly, it will be shown in &quot;Actions&quot; tab at your github repository.&lt;/p&gt;
&lt;p&gt;Now you have a dedicated page to monitor your site performance from time-to-time and automatically updated.&lt;/p&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;p&gt;It&apos;s important to note that the more URL you add to your speedlify configurations, the build time needed will be increased. The free version of Netlify have a maximum 15 minutes build time for every build process and 300 minutes build time quota for every month.&lt;/p&gt;
&lt;p&gt;I work around it by limiting my measurement to be done maximum once every 23 hours and limiting the total URLs from all category to be around 5 until 10, and automatically trigger the build every day on weekdays only at 10PM. With those configurations, every build would spend around 4 until 7 minutes (&amp;#x3C;15 minutes), so I won&apos;t hit the monthly build time quota limit (4.5 * 5 * 7 ~= 160 minutes -&gt; &amp;#x3C;300 minutes).&lt;/p&gt;
&lt;h2&gt;Thank You!&lt;/h2&gt;
&lt;p&gt;For reading this article. I hope you found this useful.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.speedlify.dev/&quot;&gt;https://www.speedlify.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zachleat/speedlify/#deploy-to-netlify&quot;&gt;https://github.com/zachleat/speedlify/#deploy-to-netlify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zachleat/speedlify/#known-limitations&quot;&gt;https://github.com/zachleat/speedlify/#known-limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachleat.com/web/speedlify/&quot;&gt;https://www.zachleat.com/web/speedlify/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Some Alternatives&lt;/h2&gt;
&lt;p&gt;(some exhaustive list of other tools to measure your website performance)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/measure/&quot;&gt;https://web.dev/measure/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/measure/&quot;&gt;https://www.lightest.app/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[May 2020 Quarantine Self Challenge]]></title>
            <link>https://dav1d992.com/blog/quarantine-self-challenge</link>
            <guid isPermaLink="false">https://dav1d992.com/blog/quarantine-self-challenge</guid>
            <dc:creator><![CDATA[dav1d992]]></dc:creator>
            <pubDate>Sat, 02 May 2020 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;Recently I challenged myself to make a web app as soon as possible in two days. Managed to make two. One is a simple Food Recipe App and the other is COVID-19 Data App.
Turned out it was so fun.&lt;/p&gt;
&lt;h2&gt;1. Le Cook&lt;/h2&gt;
&lt;p&gt;Fun food recipe catalog app powered by &lt;a href=&quot;https://recipepuppy.com&quot;&gt;RecipePuppy&lt;/a&gt; API....&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://le-cook.now.sh/&quot;&gt;https://le-cook.now.sh/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/le-cook_1.jpg&quot; alt=&quot;Le Cook (1)&quot;&gt;
&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/le-cook_2.jpg&quot; alt=&quot;Le Cook (2)&quot;&gt;
&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/le-cook_3.jpg&quot; alt=&quot;Le Cook (3)&quot;&gt;&lt;/p&gt;
&lt;h2&gt;2. COVID-19 Data&lt;/h2&gt;
&lt;p&gt;presenting COVID-19 statistics powered by &lt;a href=&quot;https://github.com/mathdroid/covid-19-api/&quot;&gt;@mathdroid&lt;/a&gt;&apos;s covid-19-api.
I made a vanilla JS version of this app several days ago and I decided to re-develop it using Gatsby (React).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://covid19data.now.sh/&quot;&gt;https://covid19data.now.sh/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/covid19data_1.jpg&quot; alt=&quot;COVID-19 Data App (1)&quot;&gt;
&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/covid19data_2.jpg&quot; alt=&quot;COVID-19 Data App (2)&quot;&gt;
&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/covid19data_3.jpg&quot; alt=&quot;COVID-19 Data App (3)&quot;&gt;&lt;/p&gt;
&lt;p&gt;Both &lt;a href=&quot;https://le-cook.now.sh/&quot;&gt;Le Cook&lt;/a&gt; and &lt;a href=&quot;https://covid19data.now.sh/&quot;&gt;COVID-19 Data&lt;/a&gt; app were developed using Segment&apos;s Evergreen UI. Just discovered this React UI Framework and turns out it&apos;s so convenient to implement it on these projects.&lt;/p&gt;
&lt;p&gt;When developing COVID-19 Data app, I realized Evergreen UI have no opinionated way to construct responsive layouts. So, I decided to combine it with TailwindCSS which I already tried to use at this personal site. It worked.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/evergreen-ui_1.jpg&quot; alt=&quot;Evergreen UI (1)&quot;&gt;
&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/evergreen-ui_2.jpg&quot; alt=&quot;Evergreen UI (2)&quot;&gt;
&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/evergreen-ui_3.jpg&quot; alt=&quot;Evergreen UI (3)&quot;&gt;
&lt;img src=&quot;https://dav1d992.com/images/2020-05-02-self-challenge/evergreen-ui_4.jpg&quot; alt=&quot;Evergreen UI (4)&quot;&gt;&lt;/p&gt;
&lt;p&gt;I decided to deploy it using &lt;a href=&quot;https://vercel.com&quot;&gt;Vercel&lt;/a&gt; and I&apos;m so shocked by how fast it is compared to &lt;a href=&quot;https://netlify.com&quot;&gt;Netlify&lt;/a&gt;. I&apos;m considering to migrate to Vercel from Netlify for my previous projects, including this site.&lt;/p&gt;
&lt;p&gt;I posted my recent projects &lt;a href=&quot;https://dav1d992.com/projects&quot;&gt;here&lt;/a&gt;.
You can access the project and the project&apos;s GitHub repository link from this &lt;a href=&quot;https://dav1d992.com/projects&quot;&gt;page&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[Stackbit, the Game Changer]]></title>
            <link>https://dav1d992.com/blog/stackbit-the-game-changer</link>
            <guid isPermaLink="false">https://dav1d992.com/blog/stackbit-the-game-changer</guid>
            <dc:creator><![CDATA[dav1d992]]></dc:creator>
            <pubDate>Sun, 22 Mar 2020 00:00:00 GMT</pubDate>
            <content:encoded>&lt;p&gt;&lt;em&gt;by the time I wrote this post, Stackbit is still at Beta.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Have you ever thought of launching a landing page or a blog with the technology of your choice in just under 10 minutes? Since JAMStack is getting more popular these days, more sites are being developed this way. Building it from scratch is also not too hard. But the problem is sometimes the initialization of the project or the deployment process can spend more time than you think. Not to mention if you are someone who just want to get a little grasp of what all this about without getting your hands dirty and spending some hours just to know what are you actually trying to do. Or if you are a first-timer who needs a step-by-step guide.&lt;/p&gt;
&lt;p&gt;Yes, this is for you if you want to get a taste of what is JAMStack site about, how does it work in general, but you don&apos;t want to build it from scratch just to know it. This is for you if you are someone who are very familiar with building JAMStack sites, having multiple and upcoming clients who requests high performance yet low-cost site. Well, this is where Stackbit plays the role for you.&lt;/p&gt;
&lt;p&gt;You can call Stackbit as your smart-assistant who helps you to start your JAMStack site. It&apos;s very easy to use, you just need to prepare your GitHub account (GitLab and BitBucket support coming soon) and a Netlify account. The next thing is just register yourself into Stackbit (you can even register using your GitHub account so it&apos;s more convenient) and you can start to Build a Project. You gonna choose the site theme, the site generator framework, CMS, then you can deploy it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dav1d992.com/images/stackbit-beta.png&quot; alt=&quot;Stackbit Beta&quot;&gt;&lt;/p&gt;
&lt;p&gt;All of it are done just by picking, doing some clicks, and voila. Yeah, all of the process involve no code. But if you want to develop and customize the project further, that&apos;s where your hands start getting dirty.&lt;/p&gt;
&lt;p&gt;So, what are you waiting for? Don&apos;t just read this post, it won&apos;t bring you anywhere. &lt;em&gt;Try it now&lt;/em&gt; and you will know what I&apos;m talking about ðŸ˜‚.&lt;/p&gt;
</content:encoded>
        </item>
    </channel>
</rss>